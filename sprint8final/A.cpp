//https://contest.yandex.ru/contest/26133/run-report/112035470/

/*
-- ПРИНЦИП РАБОТЫ --

Сначала нужно распаковать строки и затем найти наибольший общий префикс для этих строк.

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --

Изначально за префикс берётся первая распакованная строка и затем с каждой следующей распакованной строкой идёт посимвольное сравнение.
Как только символы не совпадают то префикс на этом символе обрезается

-- ВРЕМЕННАЯ СЛОЖНОСТЬ --

Сложность распаковки:
Рассмотрим крайний случай вида 9[9[9[9[9[9[9[9[9[...9[9[9[9[a]]]]]]]]]]]]].
Нужно будет в цикле перебрать все символы запакованной строки и на каждом шаге, пока не будет найден запакованный символ, сохранять значения в стек, 
это будет линейная сложность по числу символов запакованной строки.
Затем будет цикл, который в зависимости от степени запаковки d составляет распакованную строку из строки с уже распакованными символами из стека, 
на каждом шаге цикла распаковки будет линейная сложность в зависимости от степени запаковки d - добавлять в конец строки уже распакованную на предыдущем шаге строку.
Для вложенных запаковок эта сложность будет суммироваться, и в итоге её нужно будет умножить на сумму всех вложенных запаковок.
Получается итоговая временная сложность распаковки будет экспоненциальной 9^k, где k - количество вложенных запаковок.
Для поиска префикса нужно перебрать все распакованные строки и в худшем случае, если все строки будут равны, то придётся перебрать все символы в строке.
Итоговая временная сложность: O(n*m), где n - количество строк, m - длина самой большой распакованной строки.

-- ПРОСТРАНСТВЕННАЯ СЛОЖНОСТЬ --

Используется дополнительная память при распаковке строки, которая занимает не больше, чем число запакованных символов, и под саму распакованную строку.
Поэтому итоговая пространственная сложность: O(m), m - длина самой большой строки.
*/

#include <cctype>
#include <iostream>
#include <stack>
#include <string>
#include <vector>

using namespace std;

string Unpack(const string& line) {
	string result;
	stack<int> multiply;
	stack<string> symbol;
	for (const auto& ch : line) {
		if (isdigit(ch)) {
			multiply.push(ch - '0');
		}
		else if (ch == '[') {
			symbol.push("");
		}
		else if (ch == ']') {
			if (symbol.size() == 1) {
				for (int i = 0; i < multiply.top(); ++i) {
					result += symbol.top();
				}
				multiply.pop();
				symbol.pop();
			}
			else {
				string previous = symbol.top();
				symbol.pop();
				for (int i = 0; i < multiply.top(); ++i) {
					symbol.top() += previous;
				}
				multiply.pop();
			}
		}
		else if (symbol.size() == 0) {
			result.push_back(ch);
		}
		else {
			symbol.top().push_back(ch);
		}
	}
	return result;
}

int main() {
	int n;
	cin >> n;
	vector<string> lines(n);
	for (int i = 0; i < n; ++i) {
		cin >> lines[i];
	}
	string prefix = Unpack(lines[0]);
	for (int i = 1; i < lines.size(); ++i) {
		string str = Unpack(lines[i]);
		for (int j = 0; j < prefix.size(); ++j) {
			if (prefix[j] != str[j]) {
				prefix.erase(j);
				break;
			}
		}
	}
	cout << prefix;
}
